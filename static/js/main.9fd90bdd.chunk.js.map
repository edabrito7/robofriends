{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","email","id","className","alt","src","CardList","robots","CardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAoBeA,EAfF,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAEtC,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACC,4BAAMH,GACN,2BAAKC,GACL,2BAAKC,MCUMK,G,KAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAYD,EAAOE,KAAK,SAACC,EAAKC,GACnC,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdH,KAAMQ,EAAOI,GAAGZ,KAChBC,SAAUO,EAAOI,GAAGX,SACpBC,MAAOM,EAAOI,GAAGV,WAIlB,OACC,yBAAKE,UAAU,aACZK,EADH,OCAaK,EAXG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACC,yBAAKZ,UAAU,OACd,2BACAA,UAAU,mCACVa,KAAK,SAASC,YAAY,eAC1BC,SAAWH,MCECI,EATA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,UACvCH,EAAMI,WCoBKC,E,kDAvBd,WAAaL,GAAQ,IAAD,8BACnB,cAAMA,IACDM,MAAQ,CACZC,UAAU,GAHQ,E,8DAQFC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,wCAEDG,KAAKV,MAAMI,a,GAjBOQ,aC6DZC,E,kDAtDd,aAAe,IAAD,8BACb,gBAkBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACjB,YAAaqB,EAAMC,OAAOC,SAlBzC,EAAKX,MAAQ,CACZnB,OAAQ,GACRO,YAAa,IAJD,E,gEAQO,IAAD,OACpBwB,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACJ,EAAKX,SAAS,CAACxB,OAAQmC,S,+BAWd,IAAD,OACHC,EAAiBb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAArC,GAC/C,OAAOA,EAAOR,KAAK8C,cAAcC,SAAS,EAAKpB,MAAMZ,YAAY+B,kBAElE,OAAQf,KAAKJ,MAAMnB,OAAOwC,OAIzB,yBAAK5C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAiBe,KAAKI,iBACjC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAW3B,OAAWoC,OARvB,wBAAIxC,UAAU,SAAd,gB,GA9Bc6B,aCGEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAIDC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.9fd90bdd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Card = ({ name, username, email, id}) => {\r\n\t\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{ name }</h2>\r\n\t\t\t\t<p>{ username }</p>\r\n\t\t\t\t<p>{ email }</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nimport '../Containers/App.css'\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst CardArray = robots.map ((user,i) => {\r\n\t\treturn <Card \r\n\t\tkey={i}\r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\tusername={robots[i].username} \r\n\t\temail={robots[i].email}/>;\r\n\t\t\t})\r\n\t\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{ CardArray };\r\n  \t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa3\">\r\n\t\t\t<input \r\n\t\t\tclassName=\"pa3 ba g--green bg-lightest-blue\"\r\n\t\t\ttype=\"search\" placeholder=\"Seach Robots\"\r\n\t\t\tonChange={ searchChange } />\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport '../Containers/App.css'\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', height:'500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t); \r\n\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error,info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender () {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Ooooops.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidMount () {\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>{\r\n\t\treturn response.json()\r\n\t})\r\n\t.then(users => {\r\n\t\t\tthis.setState({robots: users})\r\n\t})\r\n\r\n}\r\n\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\r\n\t\t}\r\n\r\n\trender () {\r\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn !this.state.robots.length ? \r\n\t\t\t\t<h1 className=\"f2 tc\">Loading </h1> :\r\n\t\t\t(\r\n\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f2\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange = { this.onSearchChange }/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList  robots = { filteredRobots } />\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App/>\n\n    \n </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}